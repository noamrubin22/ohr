{"version":3,"file":"static/js/608.0b430926.chunk.js","mappings":"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","sources":["../node_modules/@project-serum/sol-wallet-adapter/src/index.ts","../node_modules/@project-serum/sol-wallet-adapter/node_modules/bs58/index.js"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n"],"names":["Wallet","EventEmitter","constructor","provider","_network","super","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","this","_injectedProvider","source","window","origin","_a","_providerUrl","data","method","newPublicKey","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","a","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","handleConnect","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","_ref","delete","connected","requestId","set","jsonrpc","Object","assign","_c","_b","_d","focus","connect","close","sign","display","Uint8Array","response","signature","bs58","signTransaction","transaction","message","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman","basex","require","module","exports"],"sourceRoot":""}